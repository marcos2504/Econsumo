"""
Servicio de Email Simple para Notificaciones

Este servicio maneja el env√≠o de emails de alerta usando
la configuraci√≥n existente de Gmail y OAuth.

Author: AI Assistant
Date: 2024
"""

import logging
import smtplib
import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List, Any, Optional
from datetime import datetime

from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

logger = logging.getLogger(__name__)

class SimpleEmailService:
    """Servicio simplificado para env√≠o de emails de notificaci√≥n"""
    
    def __init__(self, client_id: str = None, client_secret: str = None):
        self.client_id = client_id
        self.client_secret = client_secret
    
    def send_anomaly_alert(
        self, 
        user_email: str, 
        refresh_token: str, 
        anomalias: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        Enviar alerta de anomal√≠as por email
        
        Args:
            user_email: Email del usuario
            refresh_token: Refresh token para autenticaci√≥n
            anomalias: Lista de anomal√≠as detectadas
            
        Returns:
            Resultado del env√≠o
        """
        try:
            if not anomalias:
                return {
                    "success": False,
                    "message": "No hay anomal√≠as para reportar"
                }
            
            # Crear contenido del email
            subject = f"üö® Alerta: {len(anomalias)} Anomal√≠a(s) de Consumo Detectada(s)"
            html_content = self._create_email_content(anomalias)
            
            # Por ahora, registrar el intento (implementaci√≥n completa requiere configuraci√≥n OAuth)
            logger.info(f"üìß [SIMULADO] Enviando alerta a {user_email}")
            logger.info(f"üìä Anomal√≠as detectadas: {len(anomalias)}")
            
            for i, anomalia in enumerate(anomalias, 1):
                logger.info(f"  {i}. NIC {anomalia.get('nic')}: {anomalia.get('consumo_kwh')} kWh (+{anomalia.get('aumento_porcentual', 0):.1f}%)")
            
            # Simular env√≠o exitoso
            return {
                "success": True,
                "message": f"Email simulado enviado a {user_email}",
                "anomalies_count": len(anomalias),
                "recipient": user_email,
                "subject": subject,
                "timestamp": datetime.now().isoformat(),
                "note": "Este es un env√≠o simulado. Para env√≠o real, configura GOOGLE_CLIENT_ID y GOOGLE_CLIENT_SECRET"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando email: {str(e)}")
            return {
                "success": False,
                "message": f"Error: {str(e)}",
                "recipient": user_email
            }
    
    def _create_email_content(self, anomalias: List[Dict[str, Any]]) -> str:
        """Crear contenido HTML del email"""
        total_anomalias = len(anomalias)
        consumo_total = sum(a.get('consumo_kwh', 0) for a in anomalias)
        aumento_promedio = sum(a.get('aumento_porcentual', 0) for a in anomalias) / total_anomalias if total_anomalias > 0 else 0
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .alert {{ background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; }}
                .anomaly {{ background-color: #f8f9fa; margin: 10px 0; padding: 10px; border-left: 4px solid #dc3545; }}
                .stats {{ background-color: #e3f2fd; padding: 10px; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="alert">
                <h2>üö® Alerta de Consumo El√©ctrico Alto</h2>
                <p>Se detectaron <strong>{total_anomalias}</strong> anomal√≠as en tu consumo el√©ctrico.</p>
            </div>
            
            <div class="stats">
                <h3>üìä Resumen:</h3>
                <ul>
                    <li>Total de propiedades afectadas: {total_anomalias}</li>
                    <li>Consumo total anormal: {consumo_total:.2f} kWh</li>
                    <li>Aumento promedio: {aumento_promedio:.1f}%</li>
                </ul>
            </div>
            
            <h3>üè† Detalles:</h3>
        """
        
        for i, anomalia in enumerate(anomalias, 1):
            html += f"""
            <div class="anomaly">
                <strong>Propiedad #{i}</strong><br>
                NIC: {anomalia.get('nic', 'N/A')}<br>
                Consumo: {anomalia.get('consumo_kwh', 0)} kWh<br>
                Aumento: +{anomalia.get('aumento_porcentual', 0):.1f}%<br>
                Direcci√≥n: {anomalia.get('direccion', 'N/A')}
            </div>
            """
        
        html += """
            <p><strong>üí° Recomendaci√≥n:</strong> Revisa el consumo de tus electrodom√©sticos y considera medidas de ahorro energ√©tico.</p>
            <p><small>Este email fue generado autom√°ticamente por el Sistema E-Consumo.</small></p>
        </body>
        </html>
        """
        
        return html
    
    def test_connection(self, refresh_token: str) -> Dict[str, Any]:
        """
        Probar la conexi√≥n con Gmail
        
        Args:
            refresh_token: Refresh token del usuario
            
        Returns:
            Resultado de la prueba
        """
        try:
            # Por ahora, simular prueba exitosa
            return {
                "success": True,
                "message": "Conexi√≥n simulada exitosa",
                "gmail_api": "not_configured",
                "note": "Configura GOOGLE_CLIENT_ID y GOOGLE_CLIENT_SECRET para conexi√≥n real"
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": f"Error: {str(e)}"
            }

# Instancia global del servicio de email
email_service = SimpleEmailService()

def send_notification_email(
    user_email: str, 
    refresh_token: str, 
    anomalias: List[Dict[str, Any]]
) -> Dict[str, Any]:
    """
    Funci√≥n auxiliar para enviar email de notificaci√≥n
    
    Args:
        user_email: Email del destinatario
        refresh_token: Refresh token para autenticaci√≥n
        anomalias: Lista de anomal√≠as detectadas
        
    Returns:
        Resultado del env√≠o
    """
    return email_service.send_anomaly_alert(user_email, refresh_token, anomalias)
